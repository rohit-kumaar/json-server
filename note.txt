i) Server is run in port 
http://localhost:3000/

ii) For GET REQUEST 
http://localhost:3000/products
http://localhost:3000/reviews


iii) For GET REQUEST access one product
http://localhost:3000/products/1
http://localhost:3000/reviews/1

iv) For Filtering the data
http://localhost:3000/products?category=electronics


v) Access nested property
http://localhost:3000/products?category=electronics&discount.type=shipping

vi) Sorting the product
http://localhost:3000/products?_sort=price (For Ascending)
http://localhost:3000/products?_sort=price&_order=desc  (For Descending)
http://localhost:3000/products?_sort=price,category&_order=desc,asc (For Descending order price and then Ascending order category)

vii) Pagination
http://localhost:3000/products?_page=1 (On 1st page shows 10 data)
http://localhost:3000/products?_page=1&_limit=2 (Limit the showing data is 2, check next data change _page=2)

vii) Operators
http://localhost:3000/products?price_gte=2000&price_lte=6000 (Price in between 2000 to 6000)
http://localhost:3000/products?id_ne=1 (ID 1 is skipped)
http://localhost:3000/products?category_like=^f (Filter all data start with f)

viii) Full text Search
http://localhost:3000/products?q=in (Search in)

ix) Relationships
http://localhost:3000/products?_embed=reviews (Show product ids reviews)
http://localhost:3000/products/1?_embed=reviews (Show only product id 1 reviews)
http://localhost:3000/reviews?_expand=product (Review having only one product)

x) POST Request
Install RapidAPI
create new REQUEST
set POST
set URL
click on body 
click on JSON
set your json data 
click to send

xi) PUT (In PUT REQ we need entire property)  Request
set PUT
set URL/id
click on body 
click on JSON
set your json data 
click to send

PATCH (In PATCH REQ we need only one property to update) 

DELETE Request

xii) Configurations
port :-
"json-start": "json-server --watch db.json --port 4000"

routes :-
 "json-start": "json-server --watch db.json --port 4000 --routes routes.json"